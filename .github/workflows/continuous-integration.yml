name: continuous-integration

on:
  push:
    branches:
      - master
  pull_request:
    types: [opened, synchronize]

jobs:
  test-docs-build:
    runs-on: ubuntu-20.04
    continue-on-error: true
    steps:
      - uses: actions/checkout@v2
      - name: Build Doxygen Docs
        uses: mattnotmitt/doxygen-action@v1.3.3

  continuous-integration:
    runs-on: ${{ matrix.os }}
    env:
      BUILD_TYPE: Debug
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-20.04]
        cxx: [g++-10, clang++]
        include:
          # macos has two separate versions for the different compilers because
          # the new macos image needed for clang using a new version of XCode
          # for C++20 three-way-comparison operator support is only available
          # on the new macos image, however that new image doesn't provide G++10,
          # which the old image does
          - os: macos-10.15
            cxx: g++-10
          - os: macos-12
            cxx: clang++
          - os: windows-2019
            cxx: msvc
          # memory-testing on Linux only
          - os: ubuntu-20.04
            cxx: g++-10
            memtest: true

    steps:
      - uses: actions/checkout@v2

      # when building on master branch and not a pull request, build and test in release mode (optimised build)
      - name: Set Build Mode to Release
        shell: bash
        if: ${{ github.event_name != 'pull_request' && github.ref == 'refs/heads/master' }}
        run: echo "BUILD_TYPE=Release" >> $GITHUB_ENV

      - name: Install Valgrind
        if: ${{ matrix.memtest }}
        run: |
          sudo apt-get update
          sudo apt-get install valgrind

      - name: Configure CMake
        env:
          CXX: ${{ matrix.cxx }}
        # Use a bash shell so we can use the same syntax for environment variable
        # access regardless of the host operating system
        shell: bash
        working-directory: ${{github.workspace}}/build
        # Note the current convention is to use the -S and -B options here to specify source 
        # and build directories, but this is only available with CMake 3.13 and higher.  
        # The CMake binaries on the Github Actions machines are (as of this writing) 3.12
        run: cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DCMAKE_INSTALL_PREFIX:PATH=$GITHUB_WORKSPACE/test_install -DENABLE_TESTS=ON

      - name: Build
        working-directory: ${{github.workspace}}/build
        shell: bash
        # Execute the build.  You can specify a specific target with "--target <NAME>"
        run: cmake --build . --config $BUILD_TYPE

      - name: Test
        if: ${{ !matrix.memtest }}
        working-directory: ${{github.workspace}}/build
        shell: bash
        # Execute tests defined by the CMake configuration.  
        # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
        run: ctest -C $BUILD_TYPE --no-tests=error

      - name: Test with Valgrind
        if: ${{ matrix.memtest }}
        working-directory: ${{github.workspace}}/build
        shell: bash
        # run ctest with memcheck mode to check for memory errors with Valgrind  
        run: ctest -C $BUILD_TYPE -T memcheck --no-tests=error

      - name: Test Install
        working-directory: ${{github.workspace}}/build
        shell: bash
        # Test install with CMake to the "test_install" directory
        run: cmake --install . --config $BUILD_TYPE
